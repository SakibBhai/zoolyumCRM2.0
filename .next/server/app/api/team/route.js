(()=>{var e={};e.id=645,e.ids=[645],e.modules={96330:e=>{"use strict";e.exports=require("@prisma/client")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},12412:e=>{"use strict";e.exports=require("assert")},79428:e=>{"use strict";e.exports=require("buffer")},55511:e=>{"use strict";e.exports=require("crypto")},94735:e=>{"use strict";e.exports=require("events")},81630:e=>{"use strict";e.exports=require("http")},55591:e=>{"use strict";e.exports=require("https")},11723:e=>{"use strict";e.exports=require("querystring")},79551:e=>{"use strict";e.exports=require("url")},28354:e=>{"use strict";e.exports=require("util")},74075:e=>{"use strict";e.exports=require("zlib")},54860:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>I,routeModule:()=>A,serverHooks:()=>f,workAsyncStorage:()=>R,workUnitAsyncStorage:()=>E});var s={};t.r(s),t.d(s,{DELETE:()=>y,GET:()=>g,POST:()=>j,PUT:()=>x});var a=t(44932),i=t(41913),n=t(96656),o=t(77949),u=t(86745),l=t(26718),d=t(96330),c=t(84133),p=t(8201),m=t(50826),v=t.n(m);let w=new d.PrismaClient,N=c.Ik({name:c.Yj().min(1,"Name is required"),email:c.Yj().email("Invalid email format"),password:c.Yj().min(6,"Password must be at least 6 characters"),role:c.k5(["ADMIN","MANAGER","MEMBER"]).default("MEMBER"),department:c.Yj().optional(),position:c.Yj().optional(),phone:c.Yj().optional(),avatar:c.Yj().optional(),isActive:c.zM().default(!0)}),h=c.Ik({name:c.Yj().min(1,"Name is required").optional(),email:c.Yj().email("Invalid email format").optional(),role:c.k5(["ADMIN","MANAGER","MEMBER"]).optional(),department:c.Yj().optional(),position:c.Yj().optional(),phone:c.Yj().optional(),avatar:c.Yj().optional(),isActive:c.zM().optional()});async function g(e){try{let r=await (0,u.getServerSession)(l.Nh);if(!r?.user?.id)return o.NextResponse.json({error:"Unauthorized"},{status:401});let{searchParams:t}=new URL(e.url),s=parseInt(t.get("page")||"1"),a=parseInt(t.get("limit")||"10"),i=t.get("search")||"",n=t.get("role"),d=t.get("department"),c=t.get("isActive"),p=t.get("sortBy")||"createdAt",m=t.get("sortOrder")||"desc",v=(s-1)*a,N={};i&&(N.OR=[{name:{contains:i,mode:"insensitive"}},{email:{contains:i,mode:"insensitive"}},{department:{contains:i,mode:"insensitive"}},{position:{contains:i,mode:"insensitive"}}]),n&&(N.role=n),d&&(N.department=d),null!=c&&(N.isActive="true"===c);let[h,g]=await Promise.all([w.user.findMany({where:N,skip:v,take:a,orderBy:{[p]:m},select:{id:!0,name:!0,email:!0,role:!0,department:!0,position:!0,phone:!0,avatar:!0,isActive:!0,createdAt:!0,updatedAt:!0,_count:{select:{assignedLeads:!0,assignedClients:!0,managedProjects:!0,assignedTasks:!0,timeEntries:!0}},assignedTasks:{where:{status:{in:["TODO","IN_PROGRESS"]}},select:{id:!0,title:!0,status:!0,priority:!0,dueDate:!0,project:{select:{id:!0,name:!0}}},orderBy:{dueDate:"asc"},take:5},managedProjects:{where:{status:{in:["PLANNING","IN_PROGRESS"]}},select:{id:!0,name:!0,status:!0,priority:!0,endDate:!0},orderBy:{endDate:"asc"},take:3}}}),w.user.count({where:N})]),j=Math.ceil(g/a);return o.NextResponse.json({teamMembers:h,pagination:{page:s,limit:a,total:g,totalPages:j,hasNext:s<j,hasPrev:s>1}})}catch(e){return console.error("Error fetching team members:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function j(e){try{let r=await (0,u.getServerSession)(l.Nh);if(!r?.user?.id)return o.NextResponse.json({error:"Unauthorized"},{status:401});let t=await w.user.findUnique({where:{id:r.user.id},select:{role:!0}});if(t?.role!=="ADMIN")return o.NextResponse.json({error:"Only administrators can create team members"},{status:403});let s=await e.json(),a=N.parse(s);if(await w.user.findUnique({where:{email:a.email}}))return o.NextResponse.json({error:"User with this email already exists"},{status:409});let i=await v().hash(a.password,12),n=await w.user.create({data:{...a,password:i},select:{id:!0,name:!0,email:!0,role:!0,department:!0,position:!0,phone:!0,avatar:!0,isActive:!0,createdAt:!0,updatedAt:!0}});return o.NextResponse.json(n,{status:201})}catch(e){if(e instanceof p.G)return o.NextResponse.json({error:"Validation error",details:e.errors},{status:400});return console.error("Error creating team member:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function x(e){try{let r=await (0,u.getServerSession)(l.Nh);if(!r?.user?.id)return o.NextResponse.json({error:"Unauthorized"},{status:401});let t=await w.user.findUnique({where:{id:r.user.id},select:{role:!0}});if(t?.role!=="ADMIN")return o.NextResponse.json({error:"Only administrators can update team members"},{status:403});let{ids:s,data:a}=await e.json();if(!Array.isArray(s)||0===s.length)return o.NextResponse.json({error:"User IDs array is required"},{status:400});let i=h.parse(a);if(i.email&&await w.user.findFirst({where:{email:i.email,id:{notIn:s}}}))return o.NextResponse.json({error:"Email already exists for another user"},{status:409});let n=await w.user.updateMany({where:{id:{in:s}},data:{...i,updatedAt:new Date}});return o.NextResponse.json({message:`${n.count} team members updated successfully`,updatedCount:n.count})}catch(e){if(e instanceof p.G)return o.NextResponse.json({error:"Validation error",details:e.errors},{status:400});return console.error("Error bulk updating team members:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function y(e){try{let r=await (0,u.getServerSession)(l.Nh);if(!r?.user?.id)return o.NextResponse.json({error:"Unauthorized"},{status:401});let t=await w.user.findUnique({where:{id:r.user.id},select:{role:!0}});if(t?.role!=="ADMIN")return o.NextResponse.json({error:"Only administrators can deactivate team members"},{status:403});let{ids:s}=await e.json();if(!Array.isArray(s)||0===s.length)return o.NextResponse.json({error:"User IDs array is required"},{status:400});if(s.includes(r.user.id))return o.NextResponse.json({error:"Cannot deactivate your own account"},{status:400});let a=await w.user.findMany({where:{id:{in:s},OR:[{assignedTasks:{some:{status:{in:["TODO","IN_PROGRESS"]}}}},{managedProjects:{some:{status:{in:["PLANNING","IN_PROGRESS"]}}}},{assignedLeads:{some:{status:{in:["NEW","CONTACTED","QUALIFIED"]}}}}]},select:{id:!0,name:!0,email:!0,_count:{select:{assignedTasks:{where:{status:{in:["TODO","IN_PROGRESS"]}}},managedProjects:{where:{status:{in:["PLANNING","IN_PROGRESS"]}}},assignedLeads:{where:{status:{in:["NEW","CONTACTED","QUALIFIED"]}}}}}}});if(a.length>0)return o.NextResponse.json({error:"Cannot deactivate users with active assignments",usersWithActiveWork:a.map(e=>({id:e.id,name:e.name,email:e.email,activeTasks:e._count.assignedTasks,activeProjects:e._count.managedProjects,activeLeads:e._count.assignedLeads}))},{status:409});let i=await w.user.updateMany({where:{id:{in:s}},data:{isActive:!1,updatedAt:new Date}});return o.NextResponse.json({message:`${i.count} team members deactivated successfully`,deactivatedCount:i.count})}catch(e){return console.error("Error deactivating team members:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}let A=new a.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/team/route",pathname:"/api/team",filename:"route",bundlePath:"app/api/team/route"},resolvedPagePath:"E:\\trae\\izoolyumCRM2.0\\zoolyumCRM2.0\\src\\app\\api\\team\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:R,workUnitAsyncStorage:E,serverHooks:f}=A;function I(){return(0,n.patchFetch)({workAsyncStorage:R,workUnitAsyncStorage:E})}},27771:()=>{},87859:()=>{},26718:(e,r,t)=>{"use strict";t.d(r,{Nh:()=>d});var s=t(47033),a=t(58196),i=t(34875),n=t(65972),o=t(50826),u=t(96330);let l="true"===process.env.AUTH_BYPASS_ENABLED,d={adapter:(0,s.y)(n.z),session:{strategy:"jwt"},pages:{signIn:"/auth/signin",signUp:"/auth/signup"},providers:[(0,i.A)({clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET}),(0,a.A)({name:"credentials",credentials:{email:{label:"Email",type:"email",placeholder:"john@example.com"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;if(l){console.warn("\uD83D\uDEA8 AUTH BYPASS MODE ENABLED - DEVELOPMENT ONLY!");let e=await n.z.user.findFirst({where:{role:u.UserRole.ADMIN,isActive:!0},select:{id:!0,email:!0,name:!0,role:!0,avatar:!0}});return e?{id:e.id,email:e.email,name:e.name,role:e.role,avatar:e.avatar}:{id:"bypass-user",email:"bypass@agency.com",name:"Bypass User (DEV)",role:u.UserRole.ADMIN,avatar:null}}let r=await n.z.user.findUnique({where:{email:e.email},select:{id:!0,email:!0,name:!0,password:!0,role:!0,avatar:!0,isActive:!0}});return r&&r.isActive&&r.password&&await (0,o.compare)(e.password,r.password)?{id:r.id,email:r.email,name:r.name,role:r.role,avatar:r.avatar}:null}})],callbacks:{jwt:async({token:e,user:r})=>(r&&(e.role=r.role,e.avatar=r.avatar),e),session:async({session:e,token:r})=>(r&&(e.user.id=r.sub,e.user.role=r.role,e.user.avatar=r.avatar),e),async signIn({user:e,account:r,profile:t}){if(r?.provider==="google")try{await n.z.user.findUnique({where:{email:e.email}})||await n.z.user.create({data:{email:e.email,name:e.name,avatar:e.image,role:u.UserRole.AGENT}})}catch(e){return console.error("Error creating user:",e),!1}return!0}}}},65972:(e,r,t)=>{"use strict";t.d(r,{z:()=>a});var s=t(96330);let a=globalThis.prisma??new s.PrismaClient({log:["query"]})}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[5363,3186,7304,4133],()=>t(54860));module.exports=s})();